platform :ios, '9.0'
require_relative '../node_modules/@react-native-community/cli-platform-ios/native_modules'

target 'testRN' do
  # Pods for testRN
  pod 'FBLazyVector', :path => "../node_modules/react-native/Libraries/FBLazyVector"
  pod 'FBReactNativeSpec', :path => "../node_modules/react-native/Libraries/FBReactNativeSpec"
  pod 'RCTRequired', :path => "../node_modules/react-native/Libraries/RCTRequired"
  pod 'RCTTypeSafety', :path => "../node_modules/react-native/Libraries/TypeSafety"
  pod 'React', :path => '../node_modules/react-native/'
  pod 'React-Core', :path => '../node_modules/react-native/'
  pod 'React-CoreModules', :path => '../node_modules/react-native/React/CoreModules'
  pod 'React-Core/DevSupport', :path => '../node_modules/react-native/'
  pod 'React-RCTActionSheet', :path => '../node_modules/react-native/Libraries/ActionSheetIOS'
  pod 'React-RCTAnimation', :path => '../node_modules/react-native/Libraries/NativeAnimation'
  pod 'React-RCTBlob', :path => '../node_modules/react-native/Libraries/Blob'
  pod 'React-RCTImage', :path => '../node_modules/react-native/Libraries/Image'
  pod 'React-RCTLinking', :path => '../node_modules/react-native/Libraries/LinkingIOS'
  pod 'React-RCTNetwork', :path => '../node_modules/react-native/Libraries/Network'
  pod 'React-RCTSettings', :path => '../node_modules/react-native/Libraries/Settings'
  pod 'React-RCTText', :path => '../node_modules/react-native/Libraries/Text'
  pod 'React-RCTVibration', :path => '../node_modules/react-native/Libraries/Vibration'
  pod 'React-Core/RCTWebSocket', :path => '../node_modules/react-native/'

  pod 'React-cxxreact', :path => '../node_modules/react-native/ReactCommon/cxxreact'
  pod 'React-jsi', :path => '../node_modules/react-native/ReactCommon/jsi'
  pod 'React-jsiexecutor', :path => '../node_modules/react-native/ReactCommon/jsiexecutor'
  pod 'React-jsinspector', :path => '../node_modules/react-native/ReactCommon/jsinspector'
  pod 'ReactCommon/jscallinvoker', :path => "../node_modules/react-native/ReactCommon"
  pod 'ReactCommon/turbomodule/core', :path => "../node_modules/react-native/ReactCommon"
  pod 'Yoga', :path => '../node_modules/react-native/ReactCommon/yoga'

  pod 'DoubleConversion', :podspec => '../node_modules/react-native/third-party-podspecs/DoubleConversion.podspec'
  pod 'glog', :podspec => '../node_modules/react-native/third-party-podspecs/glog.podspec'
  pod 'Folly', :podspec => '../node_modules/react-native/third-party-podspecs/Folly.podspec'

  target 'testRNTests' do
    inherit! :search_paths
    # Pods for testing
  end

  use_native_modules!
end

target 'testRN-tvOS' do
  # Pods for testRN-tvOS

  target 'testRN-tvOSTests' do
    inherit! :search_paths
    # Pods for testing
  end

end



def find_and_replace(dir, findstr, replacestr)
  Dir[dir].each do |name|
      text = File.read(name)
      replace = text.gsub(findstr,replacestr)
      if text != replace
          puts "Fix: " + name
          File.open(name, "w") { |file| file.puts replace }
          STDOUT.flush
      end
  end
  Dir[dir + '*/'].each(&method(:find_and_replace))
end


post_install do |installer|
  
  find_and_replace("../node_modules/react-native/React/CxxBridge/RCTCxxBridge.mm",
   "_initializeModules:(NSArray<id<RCTBridgeModule>> *)modules", "_initializeModules:(NSArray<Class> *)modules")
  find_and_replace("../node_modules/react-native/ReactCommon/turbomodule/core/platform/ios/RCTTurboModuleManager.mm",
   "RCTBridgeModuleNameForClass(module))", "RCTBridgeModuleNameForClass(Class(module)))")
   
#   find_and_replace("../node_modules/react-native-orientation/iOS/RCTOrientation/Orientation.m","[[UIDevice currentDevice] beginGeneratingDeviceOrientationNotifications];\n","")
#  find_and_replace("../node_modules/react-native-orientation/iOS/RCTOrientation/Orientation.m","[[UIDevice currentDevice] setValue:[NSNumber numberWithInteger: UIInterfaceOrientationPortrait] forKey:@\"orientation\"];","[[NSNotificationCenter defaultCenter] postNotificationName:@\"RCTOrientationNotice\" object:nil userInfo:@{@\"key\" : @(UIInterfaceOrientationMaskPortrait)}];")
#  find_and_replace("../node_modules/react-native-orientation/iOS/RCTOrientation/Orientation.m","  if ([orientationStr isEqualToString:@\"LANDSCAPE-LEFT\"]) {\n    [Orientation setOrientation:UIInterfaceOrientationMaskLandscape];\n    [[NSOperationQueue mainQueue] addOperationWithBlock:^ {\n            [[UIDevice currentDevice] setValue:[NSNumber numberWithInteger: UIInterfaceOrientationLandscapeRight] forKey:@\"orientation\"];\n    }];\n  } else {\n    [Orientation setOrientation:UIInterfaceOrientationMaskLandscape];\n    [[NSOperationQueue mainQueue] addOperationWithBlock:^ {\n            [[UIDevice currentDevice] setValue:[NSNumber numberWithInteger: UIInterfaceOrientationLandscapeLeft] forKey:@\"orientation\"];\n    }];\n  }","[[NSOperationQueue mainQueue] addOperationWithBlock:^ {\n      [[NSNotificationCenter defaultCenter] postNotificationName:@\"RCTOrientationNotice\" object:nil userInfo:@{@\"key\" : @(UIInterfaceOrientationMaskLandscape)}];\n  }];")
#  find_and_replace("../node_modules/react-native-orientation/iOS/RCTOrientation/Orientation.m","[[UIDevice currentDevice] setValue:[NSNumber numberWithInteger: UIInterfaceOrientationLandscapeLeft] forKey:@\"orientation\"];","[[NSNotificationCenter defaultCenter] postNotificationName:@\"RCTOrientationNotice\" object:nil userInfo:@{@\"key\" : @(UIInterfaceOrientationMaskLandscapeLeft)}];")
#  find_and_replace("../node_modules/react-native-orientation/iOS/RCTOrientation/Orientation.m","[[UIDevice currentDevice] setValue:[NSNumber numberWithInteger: UIInterfaceOrientationLandscapeRight] forKey:@\"orientation\"];","[[NSNotificationCenter defaultCenter] postNotificationName:@\"RCTOrientationNotice\" object:nil userInfo:@{@\"key\" : @(UIInterfaceOrientationMaskLandscapeRight)}];")
#  find_and_replace("../node_modules/react-native-orientation/iOS/RCTOrientation/Orientation.m","[Orientation setOrientation:UIInterfaceOrientationMaskAllButUpsideDown];","[[NSOperationQueue mainQueue] addOperationWithBlock:^ {\n      [[NSNotificationCenter defaultCenter] postNotificationName:@\"RCTOrientationNotice\" object:nil userInfo:@{@\"key\" : @(UIInterfaceOrientationMaskAllButUpsideDown)}];\n  }];")
  find_and_replace("../node_modules/react-native/Libraries/Image/RCTImageUtils.m","CGFloat maxPixelSize = fmax(fmin(sourceSize.width, targetPixelSize.width),","CGFloat minW = sourceSize.width;\n    CGFloat minH = sourceSize.height;\n    if (targetPixelSize.width > sourceSize.width || targetPixelSize.height > sourceSize.height) {\n    minW = targetPixelSize.width;\n    minH = targetPixelSize.height;\n    }\n    CGFloat maxPixelSize = fmax(minW,minH);")
  find_and_replace("../node_modules/react-native/Libraries/Image/RCTImageUtils.m","fmin(sourceSize.height, targetPixelSize.height));","")
  
#  find_and_replace("../ios/Pods/Target\ Support\ Files/Pods-Dreame_Smarthome/Pods-Dreame_Smarthome-frameworks.sh","source=\"$(readlink \"${source}\")\"","source=\"$(readlink -f \"${source}\")\"")
  
  find_and_replace("../node_modules/react-native/React/Modules/RCTStatusBarManager.m", "  });\n\n  return value;", "  });\n\n  return false;")
 
  find_and_replace("../node_modules/react-native/React/Base/RCTRootView.m", "  [_contentView removeFromSuperview];\n  _contentView = nil;\n  [self showLoadingView];", "  __weak RCTRootContentView *weakContentView = _contentView;\n  [weakContentView removeFromSuperview];\n  weakContentView = nil;\n  [self showLoadingView];")
end
